Hi folks,

and welcome to the Open AS Communication Gateway!

This is the full release of the AS Communication Gateway v2.0.2s, as previously
sold only within the frame of a commercial product by underground_8 secure
computing GmbH, Linzerstr. 1, 4020 Linz, Austria (the product is formerly known
as Limes AS - this is why you find that name quite often in the sources).

The license for the whole project, included all sources, documentation and
other stuff is AGPLv3, which is included in this software package, you're
currently reading the README file of (Affero General Public Licence v3).

The AS Communication Gateway (from now on just called 'AS') aims to be a all-
in-one solution of an SMTP Gateway: It accepts incoming email, performs
various antispam-related processes like blacklisting, virus- and spam-scanning,
and relays the mails to pre-defined SMTP servers.


Main features the AS include:
 * Recipient maps (specified manually or fetched via LDAP, e.g. from MS AD)
 * Local white- and black-listing based on e-mail addresses, hostnames,
   domain-names, network ranges, CIDR ranges, reverse lookups and so on
 * Remote blacklisting (DNSBLs, URI DNSBLs, etc.)
 * Greylisting
 * Spam-scanning and scoring
 * Virus-scanning
 * Attachment scanning
 * Dynamic "Score Matrix", which lets you define what to do with mails
   from a certain origin, to what extent, at what score, and so on
 * End-User-maintainable email quarantining
 * A very nice, user-friendly web GUI


Some aspects from the programmer's point of view:
 * The AS is basically a plain Ubuntu server with several open source
   software packages, which are managed by the AS core code (e.g.
   postfix, postfix-policyd, postfwd, amavisd-new, spamassassin, clamav, etc.)
 * The AS core code is done mainly in OO Perl and aims to glue all operating
   system components and software packages together


The bzr repository you're currently reading the README of, contains:
  * lib: the Perl backend core code. Contains virtually all Perl classes,
         Perl- and shell-scripts, configuration file templates and so on.
         The contents of this directory will result in the "limesas-lib"
         Debian package upon a successful build.

  * gui: the Perl/Catalyst/TemplateToolkit core gui stuff. Contains all
         Perl controller code, TT GUI templates, I18N, development HTTP
         server scripts, session stuff and so on.
         The contents of this directory will result in the "limesas-gui"
         Debian package upon a successful build.

  * meta: does not contain code, and just exists in order to create a
        virtual Debian package which will be called "limesas", which
        includes, among a few others, dependencies to "limesas-lib" and
        "limesas-gui".

 * ext: external Libs and custom packages. The AS utilizes several software
        packages, whose sources have either be altered in order to fit our
        needs (e.g. cyrus-sasl), or are not yet packaged by Ubuntu (e.g.
        postfwd).

 * scripts: contains build-, install- and misc scripts in order to correctly
        build and install the AS system.



========================= INSTALLATION INSTRUCTIONS ===========================
 NOTE: YOU DO NOT HAVE TO DO EVERYTHING DESCRIBED BELOW MANUALLY ON YOUR OWN.
       READ THE "doc/INSTALL" FILE INSTEAD!
       THE STEPS BELOW ARE JUST DETAILED INSTALLATION DESCRIPTIONS.




== I. SET UP BARE UBUNTU SERVER ===============================================
 Install a plain Ubuntu Server 10.04[.1] (Lucid) LTS i386 (32bit) with SSH. You
 may choose any username except for commonly known existing service names (e.g.
 postfix, mail, etc.) and "limes".

 If your server is virtual (recommended), be aware that only the first network
 interface (eth0) is used by the AS code as main interface.


== II. INSTALL UBUNTU PACKAGES  ===============================================
 In order to build all necessary packages, you need to have several packages
 installed prior to starting the build. Everything here is only verified to run
 on Ubuntu Server 10.04.1, so we assume you are running the build process
 on this system. It may work on newer Ubuntus as well, but you may run into
 troubles. Chances are low that other Linux distributions will work without notable
 code and template changes.


II.1: Install build dependencies
 First we have to install Ubuntu packages, which are basically build dependencies.
 This means, they aren't necessary for the final AS appliance to operate, but
 to get the packages compiled and built.

 The script which automatically installs all build dependencies is located in
 the scripts/ directory, just call:
   # ./scripts/install-package-list.sh ./scripts/packagelist-build-deps-lucid

 Note: This packages could be (manually) removed after the whole appliance
 set-up process is finished (read: after you successfully crawled through this
 file).


II.2: Run debconf-set-selections for postfix-policyd
 Normally, Debian packages are supposed to look after certain environment
 variables and APT flags, to disable interactivity if required. Unfortunately,
 not all packages do this. One of them (and luckily the only one we're dealing
 with) is "postfix-policyd".
 In order to get rid of that, we define pre-selections so that the package
 doesn't need to interactively ask you what to do. The corresponding file which
 defines the debconf-selections is located at scripts/selections-postfix-policyd
 and has to be called as follows:
  # debconf-set-selections scripts/selections-postfix-policyd

II.3: Installing regular dependencies (from main Ubuntu repositories)
 The AS is mainly built upon numerous open-source software packages, already
 found in the main Ubuntu repositories. These packages are defined as package
 dependencies and/or pre-dependencies within the "limesas-lib", "limesas-gui"
 and "limesas" packages to be built within the next step; however, since we're
 going to install these packages via dpkg, and dpkg is not capable of resolving
 dependencies, we have to do this manually before.

   # ./scripts/install-package-list.sh ./scripts/packagelist-runtime-deps-lucid

 Note: The commercial AS appliances have been set up via a separate build-
 server and corresponding infrastructure, including a dedicated Debian
 repository - unfortunately, this repository is not available for the OSS
 version, so it's a bit more manual work.

 Note: If something fails (hashsum errors, etc) just re-run scripts and run
       "aptitude -f install" afterwards.


II.4: Installing all required CPAN modules
 We make heavy use of CPAN modules, and fortunately many of the modules we
 depend on are already packaged within Lucid, and have therefore been installed
 during the previous step.

 However, there are 5 CPAN dependencies left we have to install:
  * Authen::Htpasswd
  * Catalyst::Plugin::Authentication::Store::Htpasswd
  * Catalyst::Plugin::FormValidator
  * Catalyst::Plugin::FillInForm
  * Catalyst::Plugin::Email

 These list of packages is included within the corresponding CPAN modules
 installation script, located in scripts/install-cpan-modules.sh:
  # ./scripts/install-cpan-modules.sh


== III. BUILD & PACKAGING PROCESS =============================================
 Next, we have to build all external software packages (e.g. cyrus-sasl) and
 trigger the build process to create the corresponding Debian packages for
 lib, gui and meta (called "limesas-lib", "limesas-gui", and "limesas",
 respectively).

 First, get, patch, compile and package cyrus-sasl:
  # cd ext/cyrus-sasl-patch && ./build.sh

 And finally, package everything AS-specific (the three packages mentioned
 above) via:
  # ./scripts/build.pl

 As a result, the three limesas* Debian packages are found within the devel/
 folder.


== IV. INSTALL THE CUSTOM PACKAGES ============================================
 Finally, we need to install the AS-specific Debian packages we've just created
 with respect to the correct installation order: gui, lib, meta. Additionally,
 we have to install our previously patched cyrus-sasl packages (actually, only
 two of them).

  # dpkg -i ext/cyrus-sasl-patch/libsasl2-2_2.1.23-6limesas11_i386.deb
  # dpkg -i ext/cyrus-sasl-patch/sasl2-bin_2.1.23-6limesas11_i386.deb
  # dpkg -i devel/limesas-gui_<X.Y.Z>s-<REVISION>_i386.deb
  # dpkg -i devel/limesas-lib_<X.Y.Z>s-<REVISION>_i386.deb
  # dpkg -i devel/limesas_<X.Y.Z>s-<REVISION>_i386.deb

 The "limesas-lib" package aims to do a lot of important stuff int he postinst
 script.


== V. LOG IN ==================================================================
 Open your browser and go to https://<ip>:980. The default credentials for the
 WebGUI are username = "admin", password = "password".
 Everything on the system, even the network configuration, is managed via the
 Perl code. If you want to permanently change your network settings, either do
 this via the WebGUI (System -> Network), or manually change the corresponding
 config file at /etc/limes/xml/system.xml - the XML nodes are self-describing.




=== TROUBLESHOOTING ===========================================================
* I can't connect to the WebGUI (the HTTP request just times out)
   -> Are you on https:// ?
   -> Are you on port 980 ?
   -> Does the on-appliance firewall block your request? Try
      # /etc/init.d/firewall stop
      This would have to be done after every time Lighty is restarted

* The WebGUI is seemingly broken (there is an error-message)
   -> Have you installed all dependencies? Try
      # tail /var/log/lighttpd/error.log 
      and look what lighty is complaining about. If there is nothing to see,
      try starting /var/www/LimesGUI/scripts/limesgui_fastcgi.pl and look for
      errors.
