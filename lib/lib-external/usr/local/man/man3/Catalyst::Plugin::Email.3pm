.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Email 3pm"
.TH Email 3pm "2006-12-31" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Plugin::Email \- Send emails with Catalyst
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Catalyst \*(AqEmail\*(Aq;
\&
\&    _\|_PACKAGE_\|_\->config\->{email} = [qw/SMTP smtp.oook.de/];
\&
\&    $c\->email(
\&        header => [
\&            From    => \*(Aqsri@oook.de\*(Aq,
\&            To      => \*(Aqsri@cpan.org\*(Aq,
\&            Subject => \*(AqHello!\*(Aq
\&        ],
\&        body => \*(AqHello sri\*(Aq
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Send emails with Catalyst and Email::Send and Email::MIME::Creator.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
\&\f(CW\*(C`config\*(C'\fR accepts the same options as Email::Send.
.PP
To send using the system's \f(CW\*(C`sendmail\*(C'\fR program, set \f(CW\*(C`config\*(C'\fR like so:
.PP
.Vb 1
\&    _\|_PACKAGE_\|_\->config\->{email} = [\*(AqSendmail\*(Aq];
.Ve
.PP
To send using authenticated \s-1SMTP:\s0
.PP
.Vb 6
\&    _\|_PACKAGE_\|_\->config\->{email} = [
\&        \*(AqSMTP\*(Aq, 
\&        \*(Aqsmtp.myhost.com\*(Aq, 
\&        username => $USERNAME, 
\&        password => $PASSWORD, 
\&    ];
.Ve
.PP
For different methods of sending emails, and appropriate \f(CW\*(C`config\*(C'\fR options, 
see Email::Send::NNTP, Email::Send::Qmail, Email::Send::SMTP and 
Email::Send::Sendmail.
.SH "METHODS"
.IX Header "METHODS"
.SS "email"
.IX Subsection "email"
\&\f(CW\*(C`email()\*(C'\fR accepts the same arguments as Email::MIME::Creator's 
\&\f(CW\*(C`create()\*(C'\fR.
.PP
.Vb 7
\&    $c\->email(
\&        header => [
\&            To      => \*(Aqme@localhost\*(Aq,
\&            Subject => \*(AqA TT Email\*(Aq,
\&        ],
\&        body => $c\->subreq( \*(Aq/render_email\*(Aq ),
\&    );
.Ve
.PP
To send a multipart message, include a \f(CW\*(C`parts\*(C'\fR argument containing an 
arrayref of Email::MIME objects.
.PP
.Vb 10
\&    my @parts = (
\&        Email::MIME\->create(
\&            attributes => {
\&                content_type => \*(Aqapplication/pdf\*(Aq,
\&                encoding     => \*(Aqquoted\-printable\*(Aq,
\&                name         => \*(Aqreport.pdf\*(Aq,
\&            },
\&            body => $FILE_DATA,
\&        ),
\&        Email::MIME\->create(
\&            attributes => {
\&                content_type => \*(Aqtext/plain\*(Aq,
\&                disposition  => \*(Aqattachment\*(Aq,
\&                charset      => \*(AqUS\-ASCII\*(Aq,
\&            },
\&            body => $c\->subreq( \*(Aq/render_email\*(Aq ),
\&        ),
\&    );
\&    
\&    $c\->email(
\&        header => [
\&            To      => \*(Aqme@localhost\*(Aq,
\&            Subject => \*(AqA TT Email\*(Aq,
\&        ],
\&        parts => \e@parts,
\&    );
.Ve
.SH "USING WITH A VIEW"
.IX Header "USING WITH A VIEW"
A common practice is to handle emails using the same template language used
for \s-1HTML\s0 pages.  If your view supports the 'render' method (Like the \s-1TT\s0 view 
does), you just set the body like this:
  \f(CW$c\fR\->email(
     header => [
        To      => 'me@localhost',
        Subject => 'A \s-1TT\s0 Email',
     ],
     body => \f(CW$c\fR\->view('\s-1TT\s0')\->render($c,'mytemplate.tt'),
  }
.PP
If your view doesn't support render, you can just forward to it, then reset 
the body like this:
.PP
.Vb 10
\&    sub send_email : Local {
\&        my ( $self, $c ) = @_;  
\&        {
\&        local $c\->stash\->{names}   = [ qw/andyg sri mst/ ],
\&        local $c\->stash\->{template}= \*(Aqmytemplate.tt\*(Aq;   
\&        $c\->forward($c\->view(\*(AqMyView\*(Aq));
\&        $c\->email(
\&            header => [
\&                To      => \*(Aqme@localhost\*(Aq,
\&                Subject => \*(AqA TT Email\*(Aq,
\&            ],
\&            body => $c\->res\->body,
\&        );
\&        $c\->res\->body(undef);
\&        }
\&    }
.Ve
.PP
And the template:
.PP
.Vb 3
\&    [%\- FOREACH name IN names \-%]
\&    Hi, [% name %]!
\&    [%\- END \-%]
\&    
\&    \-\-
\&    Regards,
\&    Us
.Ve
.PP
Output:
.PP
.Vb 3
\&    Hi, andyg!
\&    Hi, sri!
\&    Hi, mst!
\&    
\&    \-\-
\&    Regards,
\&    Us
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst, Catalyst::Plugin::SubRequest, Email::Send,
Email::MIME::Creator
.SH "AUTHOR"
.IX Header "AUTHOR"
Sebastian Riedel, \f(CW\*(C`sri@cpan.org\*(C'\fR
Andy Grundman
Carl Franks 
Marcus Ramberg \f(CW\*(C`mramberg@cpan.org\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software, you can redistribute it and/or modify it 
under the same terms as Perl itself.
